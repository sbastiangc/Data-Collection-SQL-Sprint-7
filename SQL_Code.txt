
# 1. Write a code to analyze the weather data in Chicago in November 2017 from the website:

#importo las librerias 
import pandas as pd
from bs4 import BeautifulSoup
import requests

#defino el URL 
URL = 'https://practicum-content.s3.us-west-1.amazonaws.com/data-analyst-eng/moved_chicago_weather_2017.html'

#uso requests.get y text
req = requests.get(URL).text

#uso los parametros indicados y lo guardo en URL_text
URL_text = BeautifulSoup(req).find('table', attrs={"id": "weather_records"})

#creo un for para el nombre de las columnas
columns = []

#itero por fila usando find_all para cada Header Cell
for row in URL_text.find_all('th'):
    columns.append(row.text)


#creo un for para los datos de la tabla 
data = []


for row in URL_text.find_all('tr'):
     if not row.find_all('th'): #excluir los encabezados
         data.append([element.text for element in row.find_all('td')])
#uso append para agregar cada data cell


#creo un dataframe con las columnas y datos
weather_records = pd.DataFrame(data, columns=columns)

#imprimo el resultado
print(weather_records)

# 2. Print the company_name field. Find the number of taxi rides for each company for November 15 and 16, 2017, name the resulting field trips_amount, and print it out as well. 

-- Selecciono el nombre de la compañia de taxis (tabla: cabs) y cuento el numero de servicios con trip_id (tabla: trips)
SELECT
    cabs.company_name AS company_name,
    COUNT(trips.trip_id) AS trips_amount

-- FROM los datos de la tabla de taxis y la tabla trips
FROM 
    cabs 
    -- Uso Inner Join con la tabla trips en cab_id para conocer el numero de viajes por cada taxi
    INNER JOIN trips ON trips.cab_id = cabs.cab_id

-- Defino el bloque WHERE con hora de inicio del viaje y las fechas indicadas, 
WHERE
    -- Uso cast para convertir el time stamp a fecha
    -- para viajes entre el 15 y 16 de noviembre de 2017
    CAST(trips.start_ts AS date) BETWEEN '2017-11-15' AND '2017-11-16'

-- Agrupo por el nombre de la compañia    
GROUP BY
    company_name

-- Ordena los resultados por el campo trips_amount en orden descendente.
ORDER BY 
    trips_amount DESC

-- el resultado concide con la tabla de muestra - OK

# 3. Find the number of rides for each taxi company whose name contains the words "Yellow" or "Blue" from November 1, 2017 to November 7, 2017.

-- Uso el código del anterior ejercicio
-- Selecciono el nombre de la compañía de taxis (tabla: cabs) y cuento el número de servicios con trip_id (tabla: trips)


SELECT
    cabs.company_name AS company_name,
    COUNT(trips.trip_id) AS trips_amount -- Nombra la variable resultante trips_amount

FROM 
    cabs 
    -- Uso Inner Join con la tabla trips en cab_id para conocer el número de viajes por cada taxi
    INNER JOIN trips ON trips.cab_id = cabs.cab_id

    -- Defino el bloque WHERE con nombres a buscar y hora de inicio del viaje en las fechas indicadas,
WHERE
    
    -- cuyo nombre contenga las palabras "Yellow" o "Blue" 
    -- Uso LIKE para encontrar yellow y blue en el nombre de las compañías

   
    (cabs.company_name LIKE '%Yellow%' OR cabs.company_name LIKE '%Blue%')
    
     AND

    -- Uso cast para convertir el time stamp a fecha
    -- para viajes entre el 1 y 7 de noviembre de 2017
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'

-- Agrupa los resultados por el campo company_name.   
GROUP BY
    cabs.company_name 


-- Los resutlados conciden con los valores pero no el orden de la muestra, intente con company name y trips amount

--ORDER BY 
    --cabs.company_name ASC

# 4.  From November 1 to November 7, 2017, the most popular taxi companies were Flash Cab and Taxi Affiliation Services. Find the number of trips for these two companies and name the resulting variable trips_amount. 

-- Seleccionar dos columnas 1) CASE con nombre de la compañía y 2) total de viajes (trips_amount)

SELECT
    -- Abro CASE para 'Flash Cab' y 'Taxi Affiliation Services' mantener en mismo nombre
    
    CASE 
    WHEN cabs.company_name = 'Flash Cab' THEN 'Flash Cab'
    WHEN cabs.company_name = 'Taxi Affiliation Services' THEN 'Taxi Affiliation Services'
    -- uso ELSE: Otras compañías se llamarán 'Other'
    ELSE 'Other'
    -- Termino el CASE y signo el nombre company al campo con nombres de empresas 
    END AS company,
    
    -- Encuentra el número de viajes de estas dos empresas y asigna a la variable resultante el nombre trips_amount
    COUNT(trips.trip_id) as trips_amount

FROM 
    cabs 
    -- Uso Inner Join con la tabla trips en cab_id para conocer el número de viajes por cada taxi
    INNER JOIN trips ON trips.cab_id = cabs.cab_id

    -- Defino el bloque WHERE con hora de inicio del viaje en las fechas indicadas,
WHERE
    
    -- Uso cast para convertir el time stamp a fecha
    -- para viajes entre el 1 y 7 de noviembre de 2017
    CAST(trips.start_ts AS date) BETWEEN '2017-11-01' AND '2017-11-07'

-- Agrupa los datos por nombres de empresas de taxis  
GROUP BY
    company

-- Ordena el resultado en orden descendente por trips_amount    
ORDER BY 
    trips_amount DESC

-- Los resultados coinciden con la muestra - OK

# 5.  Retrieves the identifiers for the O'Hare and Loop neighborhoods from the neighborhoods table.

-- Selección de dos columnas, ID y Nombre de vecindario 
SELECT
    neighborhood_id,
    name
FROM
    neighborhoods
-- Utiliza la condición name LIKE '%Hare' OR name LIKE 'Loop'
WHERE
    name LIKE '%Hare' OR name LIKE 'Loop'

-- El resultado coincide con la muestra - OK

# 6. For each hour, it retrieves the weather records from table weather_records. Using the CASE operator, divide all hours into two groups: Bad if the description field contains the words rain or storm, and Good for the others. 

-- Para cada hora recupera los registros de condiciones meteorológicas de la tabla weather_records 

SELECT
    weather_records.ts, -- Hora en ts

-- Abro CASE para el tipo de clima, 1) si es rain o Storm entonces 'Bad'
    CASE 
    WHEN description LIKE '%rain%' THEN 'Bad' 
    WHEN description LIKE '%storm%' THEN 'Bad'
-- 2) Los demás climas seran 'Good'    
    ELSE 'Good'
    
    END AS weather_conditions --Nombra el campo resultante weather_conditions.
    
FROM 
    weather_records

# 7. Retrieve from trips, all  trips that started in the Loop (pickup_location_id: 50) on Saturday and ended in O'Hare (dropoff_location_id: 63). Get the weather conditions for each trip. Use the method you applied in the previous task. It also recovers the duration of each trip.

-- Selecionar 3 columnas 1) hora de viaje de trips 2) weather_conditions con CASE y 3) duration_seconds de trips
SELECT
    trips.start_ts AS start_ts, -- Hora en ts

-- Abro CASE para el tipo de clima, 1) si es rain o storm entonces 'Bad'
    CASE 
    WHEN description LIKE '%rain%' THEN 'Bad' 
    WHEN description LIKE '%storm%' THEN 'Bad'
-- 2) Los demás climas serán 'Good'    
    ELSE 'Good'
    
    END AS weather_conditions, --Nombra el campo resultante weather_conditions.
    trips.duration_seconds as duration_seconds -- Recupera también la duración de cada viaje
    
FROM 

    -- Uso INNER JOIN con trips y weather en con la hora como llave
    trips
    INNER JOIN weather_records ON weather_records.ts = trips.start_ts

    
WHERE
    -- Defino 3 condiciones en WHERE:
    -- 1) lugar de inicio de viaje = 50
    -- 2) lugar de fin de viaje = 63
    -- 3) Dia de la semana = 6 Uso DOW 

    trips.pickup_location_id = 50 AND 
    trips.dropoff_location_id = 63 AND 
    --aplica EXTRACT (DOW from trips.start_ts) = 6
    EXTRACT(DOW from trips.start_ts) = 6

-- Ordena por trip_id.    
ORDER BY 
    trip_id

-- El resultado coincide con la muestra 